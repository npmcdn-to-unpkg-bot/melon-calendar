{"version":3,"sources":["Calendar.js"],"names":["DateTime","cx","Calendar","props","context","value","state","onLabelClick","bind","onConfirm","onCancel","onDateChange","date","parseDate","undefined","open","getSyncUpdates","nextProps","disabled","readOnly","customValidity","defaultValue","parseValue","isNaN","getTime","Date","vilidity","stringifyValue","rawValue","isDate","dateFormat","format","parse","getValue","setState","isEqualDate","newDate","onChange","type","target","autoConfirm","render","lang","size","name","placeholder","others","validity","begin","end","className","addStates","focus","getStyleStates","build","part","displayName","LANG","week","days","defaultProps","propTypes","string","bool","oneOfType","object","shape","childContextTypes","contextTypes"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAgBYA,Q;AAhBZ;;;;;AAkBA,QAAMC,KAAK,uBAAO,UAAP,CAAX;;QAEqBC,Q;;;AAEjB,0BAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,qEAExB,2BAAMD,KAAN,EAAaC,OAAb,CAFwB;;AAIxB,gBAAMC,QAAQ,MAAKC,KAAL,CAAWD,KAAzB;;AAEA,kBAAKE,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,OAApB;AACA,kBAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeD,IAAf,OAAjB;AACA,kBAAKD,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,OAApB;AACA,kBAAKE,QAAL,GAAgB,MAAKA,QAAL,CAAcF,IAAd,OAAhB;AACA,kBAAKG,YAAL,GAAoB,MAAKA,YAAL,CAAkBH,IAAlB,OAApB;;AAEA,kBAAKF,KAAL,+BAEO,MAAKA,KAFZ;;AAII;AACAM,sBAAMP,QAAQ,MAAKQ,SAAL,CAAeR,KAAf,CAAR,GAAgCS,SAL1C;;AAOI;AACAC,sBAAM;;AARV;;AAZwB;AAwB3B;;2BAEDC,c,2BAAeC,S,EAAW;AAAA,gBAEfC,QAFe,GAEqCD,SAFrC,CAEfC,QAFe;AAAA,gBAELC,QAFK,GAEqCF,SAFrC,CAELE,QAFK;AAAA,gBAEKC,cAFL,GAEqCH,SAFrC,CAEKG,cAFL;AAAA,gBAEqBC,YAFrB,GAEqCJ,SAFrC,CAEqBI,YAFrB;;;AAItB,gBAAIhB,QAAQY,UAAUZ,KAAV,GAAkBY,UAAUZ,KAA5B,GAAoCgB,YAAhD;;AAEA;AACA,gBAAIT,OAAOP,QAAQ,KAAKiB,UAAL,CAAgBjB,KAAhB,CAAR,GAAiC,IAA5C;;AAEA;AACA;AACAO,mBAAO,CAACA,IAAD,IAASW,MAAMX,KAAKY,OAAL,EAAN,CAAT,GAAiC,IAAIC,IAAJ,EAAjC,GAA8Cb,IAArD;;AAEA,gBAAMc,WAAW,uCAAgB,IAAhB,EAAsB,EAACrB,YAAD,EAAQa,kBAAR,EAAkBE,8BAAlB,EAAtB,CAAjB;;AAEA,mBAAO;AACHR,0BADG;AAEHc,kCAFG;AAGHrB,uBAAQa,YAAYC,QAAZ,IAAwB,CAACd,KAA1B,GAAmCA,KAAnC,GAA2C,KAAKsB,cAAL,CAAoBf,IAApB;AAH/C,aAAP;AAMH,S;;2BASDU,U,uBAAWjB,K,EAAO;AACd,mBAAO,KAAKQ,SAAL,CAAeR,KAAf,CAAP;AACH,S;;2BAUDsB,c,2BAAeC,Q,EAAU;;AAErB,gBAAI,CAAC5B,SAAS6B,MAAT,CAAgBD,QAAhB,CAAL,EAAgC;AAC5B,uBAAOA,QAAP;AACH;;AAED,gBAAME,aAAa,KAAK3B,KAAL,CAAW2B,UAA9B;;AAEA,mBAAO9B,SAAS+B,MAAT,CAAgBH,QAAhB,EAA0BE,UAA1B,CAAP;AAEH,S;;2BAEDjB,S,sBAAUD,I,EAAM;;AAEZ,gBAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC1B,uBAAOA,IAAP;AACH;;AAED,gBAAImB,SAAS,KAAK5B,KAAL,CAAW2B,UAAxB;;AAEA,mBAAO9B,SAASgC,KAAT,CAAepB,IAAf,EAAqBmB,MAArB,CAAP;AACH,S;;2BAEDE,Q,uBAAW;AACP,mBAAO,KAAKN,cAAL,CAAoB,KAAKrB,KAAL,CAAWD,KAA/B,CAAP;AACH,S;;2BAODE,Y,2BAAe;AAAA,yBAEkB,KAAKJ,KAFvB;AAAA,gBAEJe,QAFI,UAEJA,QAFI;AAAA,gBAEMC,QAFN,UAEMA,QAFN;;;AAIX,gBAAID,YAAYC,QAAhB,EAA0B;AACtB;AACH;;AAED,iBAAKe,QAAL,CAAc,EAACnB,MAAM,IAAP,EAAd;AAEH,S;;2BAODN,S,wBAAY;AAAA;;AAAA,yBAEY,KAAKH,KAFjB;AAAA,gBAEHD,KAFG,UAEHA,KAFG;AAAA,gBAEIO,IAFJ,UAEIA,IAFJ;;;AAIRP,oBAAQ,KAAKQ,SAAL,CAAeR,KAAf,CAAR;;AAEA,gBAAIA,SAASL,SAASmC,WAAT,CAAqBvB,IAArB,EAA2B,KAAKC,SAAL,CAAeR,KAAf,CAA3B,CAAb,EAAgE;AAC5D,qBAAK6B,QAAL,CAAc,EAACnB,MAAM,KAAP,EAAd;AACA;AACH;;AAED,gBAAMqB,UAAUxB,OAAOA,IAAP,GAAc,IAAIa,IAAJ,EAA9B;;AAEA,iBAAKS,QAAL,CAAc,EAACnB,MAAM,KAAP,EAAcH,MAAMwB,OAApB,EAAd,EAA4C,YAAM;;AAE9C,0CAAMC,QAAN,cAAe;AACXC,0BAAM,QADK;AAEXC,kCAFW;AAGXlC,2BAAO,OAAKsB,cAAL,CAAoBS,OAApB;AAHI,iBAAf;AAMH,aARD;AAUH,S;;2BAED1B,Q,uBAAW;AACP,iBAAKwB,QAAL,CAAc,EAACnB,MAAM,KAAP,EAAd;AACH,S;;2BAEDJ,Y,+BAAsB;AAAA;;AAAA,gBAARN,KAAQ,QAARA,KAAQ;;;AAElB,iBAAK6B,QAAL,CACI,EAACtB,MAAM,KAAKC,SAAL,CAAeR,KAAf,CAAP,EADJ,EAEI,KAAKF,KAAL,CAAWqC,WAAX,GAAyB;AAAA,uBAAM,OAAK/B,SAAL,EAAN;AAAA,aAAzB,GAAkD,IAFtD;AAKH,S;;2BAEDgC,M,qBAAS;AAAA,gBAGDnC,KAHC,GAKD,IALC,CAGDA,KAHC;AAAA,gBAIDH,KAJC,GAKD,IALC,CAIDA,KAJC;AAAA,gBAQDuC,IARC,GAeDvC,KAfC,CAQDuC,IARC;AAAA,gBASDxB,QATC,GAeDf,KAfC,CASDe,QATC;AAAA,gBAUDC,QAVC,GAeDhB,KAfC,CAUDgB,QAVC;AAAA,gBAWDwB,IAXC,GAeDxC,KAfC,CAWDwC,IAXC;AAAA,gBAYDC,IAZC,GAeDzC,KAfC,CAYDyC,IAZC;AAAA,gBAaDC,WAbC,GAeD1C,KAfC,CAaD0C,WAbC;AAAA,gBAcEC,MAdF,wCAeD3C,KAfC;AAAA,gBAiBEE,KAjBF,GAiBqBC,KAjBrB,CAiBED,KAjBF;AAAA,gBAiBS0C,QAjBT,GAiBqBzC,KAjBrB,CAiBSyC,QAjBT;AAAA,gBAmBAC,KAnBA,GAmBc7C,KAnBd,CAmBA6C,KAnBA;AAAA,gBAmBOC,GAnBP,GAmBc9C,KAnBd,CAmBO8C,GAnBP;;;AAqBLD,oBAAQA,QAAQ,KAAKnC,SAAL,CAAemC,KAAf,CAAR,GAAgC,IAAxC;AACAC,kBAAMA,MAAM,KAAKpC,SAAL,CAAeoC,GAAf,CAAN,GAA4B,IAAlC;;AAtBK,gBAwBElC,IAxBF,GAwBgBT,KAxBhB,CAwBES,IAxBF;AAAA,gBAwBQH,IAxBR,GAwBgBN,KAxBhB,CAwBQM,IAxBR;;AAyBL,gBAAMsC,YAAYjD,GAAGE,KAAH,EACbgD,SADa,CACH,EAACC,OAAOrC,IAAR,EADG,EAEboC,SAFa,CAEH,KAAKE,cAAL,EAFG,EAGbC,KAHa,EAAlB;;AAKA,mBACI;AAAA;AAAA,4CAASR,MAAT,IAAiB,WAAWI,SAA5B;AACI;AACI,0BAAMN,IADV;AAEI,yBAAI,OAFR;AAGI,0BAAK,QAHT;AAII,2BAAOvC,KAJX;AAKI,8BAAUa,QALd;AAMI,0BAAMyB,IANV,GADJ;AAQI;AAAA;AAAA,sBAAO,SAAUzB,YAAYC,QAAb,GAAyB,IAAzB,GAAgC,KAAKZ,YAArD;AACKF,4BAAQA,KAAR,GACG;AAAA;AAAA,0BAAM,WAAWJ,KAAKsD,IAAL,CAAU,mBAAV,EAA+BD,KAA/B,EAAjB;AACKT;AADL,qBAFR;AAMI,0EAAM,MAAK,aAAX;AANJ,iBARJ;AAgBI,0EAAU,UAAUE,QAApB,GAhBJ;AAiBI;AAAA;AAAA;AACI,8BAAMhC,IADV;AAEI,kCAAU,CAAC,UAAD,CAFd;AAGI,mCAAW,KAAKN,SAHpB;AAII,kCAAU,KAAKC,QAJnB;AAKI,8BAAMiC,IALV;AAMI,wCAAgB,CAAC,WAAD,EAAc,UAAd,CANpB;AAOI;AACI,8BAAM/B,IADV;AAEI,+BAAOoC,KAFX;AAGI,6BAAKC,GAHT;AAII,8BAAMP,IAJV;AAKI,kCAAU,KAAK/B,YALnB;AAPJ;AAjBJ,aADJ;AAmCH,S;;;;;yBA9NgBT,Q;;;AAkOrBA,aAASsD,WAAT,GAAuB,UAAvB;;AAEAtD,aAASuD,IAAT,GAAgB;;AAEZ;AACAC,cAAM,GAHM;;AAKZ;AACAC,cAAM;;AANM,KAAhB;;AAUAzD,aAAS0D,YAAT,+BACO,4BAAeA,YADtB;AAEIvC,sBAAc,EAFlB;AAGIS,oBAAY,YAHhB;AAIIY,cAAMxC,SAASuD,IAJnB;AAKIZ,qBAAa;AALjB;;AAQA3C,aAAS2D,SAAT,+BAEO,4BAAeA,SAFtB;;AAIIxD,eAAO,iBAAUyD,MAJrB;;AAMItB,qBAAa,iBAAUuB,IAN3B;;AAQIjC,oBAAY,iBAAUgC,MAR1B;;AAUIb,aAAK,iBAAUe,SAAV,CAAoB,CACrB,iBAAUC,MADW,EAErB,iBAAUH,MAFW,CAApB,CAVT;;AAeId,eAAO,iBAAUgB,SAAV,CAAoB,CACvB,iBAAUC,MADa,EAEvB,iBAAUH,MAFa,CAApB,CAfX;;AAoBIpB,cAAM,iBAAUwB,KAAV,CAAgB;AAClBR,kBAAM,iBAAUI,MADE;AAElBH,kBAAM,iBAAUG;AAFE,SAAhB;;AApBV;;AA2BA5D,aAASiE,iBAAT,GAA6B,4BAAeA,iBAA5C;;AAEAjE,aAASkE,YAAT,GAAwB,4BAAeA,YAAvC","file":"Calendar.js","sourcesContent":["/**\n * @file melon/Calendar\n * @author cxtom<cxtom2008@gmail.com>\n */\n\nimport React, {PropTypes} from 'react';\n\nimport InputComponent from 'melon-core/InputComponent';\nimport {create} from 'melon-core/classname/cxBuilder';\nimport Validity from 'melon-core/Validity';\nimport {getNextValidity} from 'melon-core/util/syncPropsToState';\n\nimport Icon  from 'melon/Icon';\nimport Confirm from 'melon/Confirm';\n\nimport Panel from './calendar/Panel';\nimport * as DateTime from './util';\n\nconst cx = create('Calendar');\n\nexport default class Calendar extends InputComponent {\n\n    constructor(props, context) {\n\n        super(props, context);\n\n        const value = this.state.value;\n\n        this.onLabelClick = this.onLabelClick.bind(this);\n        this.onConfirm = this.onConfirm.bind(this);\n        this.onLabelClick = this.onLabelClick.bind(this);\n        this.onCancel = this.onCancel.bind(this);\n        this.onDateChange = this.onDateChange.bind(this);\n\n        this.state = {\n\n            ...this.state,\n\n            // 缓存用户在 confirm 前的选中值\n            date: value ? this.parseDate(value) : undefined,\n\n            // 是否打开选择窗\n            open: false\n\n        };\n\n    }\n\n    getSyncUpdates(nextProps) {\n\n        const {disabled, readOnly, customValidity, defaultValue} = nextProps;\n\n        let value = nextProps.value ? nextProps.value : defaultValue;\n\n        // 如果有值，那么就试着解析一下；否则设置为 null\n        let date = value ? this.parseValue(value) : null;\n\n        // 如果 date 为 null 或者是 invalid date，那么就用上默认值；\n        // 否则就用解析出来的这个值\n        date = !date || isNaN(date.getTime()) ? new Date() : date;\n\n        const vilidity = getNextValidity(this, {value, disabled, customValidity});\n\n        return {\n            date,\n            vilidity,\n            value: (disabled || readOnly || !value) ? value : this.stringifyValue(date)\n        };\n\n    }\n\n    /**\n     * 格式化日期对象\n     *\n     * @param  {string} value 日期字符串\n     * @return {Date}         转化后的日期对象\n     * @private\n     */\n    parseValue(value) {\n        return this.parseDate(value);\n    }\n\n    /**\n     * 格式化日期\n     *\n     * @param {Date} rawValue 源日期对象\n     * @param {string=} format 日期格式，默认为当前实例的dateFormat\n     * @return {string} 格式化后的日期字符串\n     * @private\n     */\n    stringifyValue(rawValue) {\n\n        if (!DateTime.isDate(rawValue)) {\n            return rawValue;\n        }\n\n        const dateFormat = this.props.dateFormat;\n\n        return DateTime.format(rawValue, dateFormat);\n\n    }\n\n    parseDate(date) {\n\n        if (typeof date !== 'string') {\n            return date;\n        }\n\n        let format = this.props.dateFormat;\n\n        return DateTime.parse(date, format);\n    }\n\n    getValue() {\n        return this.stringifyValue(this.state.value);\n    }\n\n    /**\n     * 点击textbox时触发\n     *\n     * @private\n     */\n    onLabelClick() {\n\n        const {disabled, readOnly} = this.props;\n\n        if (disabled || readOnly) {\n            return;\n        }\n\n        this.setState({open: true});\n\n    }\n\n    /**\n     * rawValue 在Calendar Dialog上点击确定或取消按钮触发\n     *\n     * @private\n     */\n    onConfirm() {\n\n        let {value, date} = this.state;\n\n        value = this.parseDate(value);\n\n        if (value && DateTime.isEqualDate(date, this.parseDate(value))) {\n            this.setState({open: false});\n            return;\n        }\n\n        const newDate = date ? date : new Date();\n\n        this.setState({open: false, date: newDate}, () => {\n\n            super.onChange({\n                type: 'change',\n                target: this,\n                value: this.stringifyValue(newDate)\n            });\n\n        });\n\n    }\n\n    onCancel() {\n        this.setState({open: false});\n    }\n\n    onDateChange({value}) {\n\n        this.setState(\n            {date: this.parseDate(value)},\n            this.props.autoConfirm ? () => this.onConfirm() : null\n        );\n\n    }\n\n    render() {\n\n        const {\n            state,\n            props\n        } = this;\n\n        const {\n            lang,\n            disabled,\n            readOnly,\n            size,\n            name,\n            placeholder,\n            ...others\n        } = props;\n\n        const {value, validity} = state;\n\n        let {begin, end} = props;\n\n        begin = begin ? this.parseDate(begin) : null;\n        end = end ? this.parseDate(end) : null;\n\n        const {open, date} = state;\n        const className = cx(props)\n            .addStates({focus: open})\n            .addStates(this.getStyleStates())\n            .build();\n\n        return (\n            <div {...others} className={className}>\n                <input\n                    name={name}\n                    ref=\"input\"\n                    type=\"hidden\"\n                    value={value}\n                    disabled={disabled}\n                    size={size} />\n                <label onClick={(disabled || readOnly) ? null : this.onLabelClick}>\n                    {value ? value : (\n                        <span className={cx().part('label-placeholder').build()}>\n                            {placeholder}\n                        </span>\n                    )}\n                    <Icon icon='expand-more' />\n                </label>\n                <Validity validity={validity} />\n                <Confirm\n                    open={open}\n                    variants={['calendar']}\n                    onConfirm={this.onConfirm}\n                    onCancel={this.onCancel}\n                    size={size}\n                    buttonVariants={['secondery', 'calendar']} >\n                    <Panel\n                        date={date}\n                        begin={begin}\n                        end={end}\n                        lang={lang}\n                        onChange={this.onDateChange} />\n                </Confirm>\n            </div>\n        );\n\n    }\n\n}\n\nCalendar.displayName = 'Calendar';\n\nCalendar.LANG = {\n\n    // 对于 '周' 的称呼\n    week: '周',\n\n    // 星期对应的顺序表示\n    days: '日,一,二,三,四,五,六'\n\n};\n\nCalendar.defaultProps = {\n    ...InputComponent.defaultProps,\n    defaultValue: '',\n    dateFormat: 'YYYY-MM-DD',\n    lang: Calendar.LANG,\n    placeholder: '请选择'\n};\n\nCalendar.propTypes = {\n\n    ...InputComponent.propTypes,\n\n    value: PropTypes.string,\n\n    autoConfirm: PropTypes.bool,\n\n    dateFormat: PropTypes.string,\n\n    end: PropTypes.oneOfType([\n        PropTypes.object,\n        PropTypes.string\n    ]),\n\n    begin: PropTypes.oneOfType([\n        PropTypes.object,\n        PropTypes.string\n    ]),\n\n    lang: PropTypes.shape({\n        week: PropTypes.string,\n        days: PropTypes.string\n    })\n\n};\n\nCalendar.childContextTypes = InputComponent.childContextTypes;\n\nCalendar.contextTypes = InputComponent.contextTypes;\n"],"sourceRoot":"/source/"}