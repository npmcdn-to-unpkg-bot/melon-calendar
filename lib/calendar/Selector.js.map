{"version":3,"sources":["calendar/Selector.js"],"names":["DateTime","cx","CalendarSelector","props","onClick","bind","e","onChange","target","mode","date","componentDidMount","item","refs","findDOMNode","scrollIntoView","componentDidUpdate","render","minDate","maxDate","rest","children","y","getFullYear","m","getMonth","d","getDate","isMonthView","map","month","index","newDate","Date","disabled","isDate","isBeforeMonth","isAfterMonth","selected","maxRange","MAX_RANGE","forEach","year","push","build","onlyOneYear","yearDiff","displayName","propTypes","object","isRequired","func","oneOf"],"mappings":"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","file":"calendar/Selector.js","sourcesContent":["/**\n * @file Calendar/CalendarSelector\n * @author cxtom(cxtom2008@gmail.com)\n */\n\nimport React, {PropTypes, Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport {create} from 'melon-core/classname/cxBuilder';\nimport Item from './SelectorItem';\nimport * as DateTime from '../util';\nimport {range} from 'melon-core/util/array';\n\nconst cx = create('CalendarSelector');\n\nexport default class CalendarSelector extends Component {\n\n    constructor(props) {\n        super(props);\n        this.onClick = this.onClick.bind(this);\n    }\n\n    onClick(e) {\n\n        const onChange = this.props.onChange;\n\n        if (onChange) {\n            onChange({\n                target: this,\n                mode: e.mode,\n                date: e.date\n            });\n        }\n\n    }\n\n    componentDidMount() {\n        const item = this.refs.item ? ReactDOM.findDOMNode(this.refs.item) : null;\n\n        // FIX jsdom 上没有这个方法，所以先判断一下\n        item && item.scrollIntoView && item.scrollIntoView();\n    }\n\n    componentDidUpdate() {\n        const item = this.refs.item ? ReactDOM.findDOMNode(this.refs.item) : null;\n\n        // FIX jsdom 上没有这个方法，所以先判断一下\n        item && item.scrollIntoView && item.scrollIntoView();\n    }\n\n    render() {\n\n        const {\n            minDate,\n            maxDate,\n            date,\n            ...rest\n        } = this.props;\n\n        let children = [];\n\n        const y = date.getFullYear();\n        const m = date.getMonth();\n        const d = date.getDate();\n\n        if (this.isMonthView()) {\n            children = range(12).map((month, index) => {\n\n                const newDate = new Date(y, month, d);\n                const disabled = (DateTime.isDate(minDate) && DateTime.isBeforeMonth(newDate, minDate))\n                                || (DateTime.isDate(maxDate) && DateTime.isAfterMonth(newDate, maxDate));\n                const selected = month === m;\n\n                return (\n                    <Item\n                        key={index}\n                        mode=\"month\"\n                        ref={selected ? 'item' : null}\n                        date={newDate}\n                        onClick={this.onClick}\n                        disabled={disabled}\n                        selected={selected} />\n                );\n\n            });\n        }\n        else {\n\n            const maxRange = CalendarSelector.MAX_RANGE;\n\n            range(y - maxRange, y + maxRange).forEach((year, index) => {\n\n                if ((DateTime.isDate(minDate) && year < minDate.getFullYear())\n                    || (DateTime.isDate(maxDate) && year > maxDate.getFullYear())) {\n\n                    return;\n                }\n\n                const newDate = new Date(year, m, d);\n                const selected = year === y;\n\n                children.push(\n                    <Item\n                        key={index}\n                        mode=\"year\"\n                        ref={selected ? 'item' : null}\n                        date={newDate}\n                        onClick={this.onClick}\n                        selected={selected} />\n                );\n\n            });\n\n        }\n\n        return (\n            <ul {...rest} className={cx(this.props).build()}>\n                {children}\n            </ul>\n        );\n\n    }\n\n    /**\n     * 是否显示日期\n     *\n     * @return {boolean}\n     * @private\n     */\n    isMonthView() {\n\n        const {\n            minDate,\n            maxDate,\n            mode\n        } = this.props;\n\n        let onlyOneYear = false;\n\n        // 如果范围中只有一年，则跳过yearview，直接显示month view\n        if (mode === 'year' && DateTime.isDate(minDate) && DateTime.isDate(maxDate)) {\n            onlyOneYear = (DateTime.yearDiff(minDate, maxDate) === 0);\n        }\n\n        return mode === 'month' || onlyOneYear;\n\n    }\n\n}\n\nCalendarSelector.displayName = 'CalendarSelector';\n\nCalendarSelector.MAX_RANGE = 10;\n\nCalendarSelector.propTypes = {\n    date: PropTypes.object.isRequired,\n    maxDate: PropTypes.object,\n    minDate: PropTypes.object,\n    onChange: PropTypes.func,\n    mode: PropTypes.oneOf(['month', 'year'])\n};\n"],"sourceRoot":"/source/"}